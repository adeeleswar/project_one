# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2019-2020 Intel Corporation

---
- include_tasks: subtasks/download_root_ca_from_controller.yml

# Stop and stop selected containers
- name: remove syslog container
  docker_container:
    name: "{{ _docker_syslog_container_name }}"
    state: absent

- name: remove appliance container
  docker_container:
    name: "{{ _docker_appliance_container_name }}"
    state: absent

- name: remove eaa container
  docker_container:
    name: "{{ _docker_eaa_container_name }}"
    state: absent

- name: remove edgednssvr container
  docker_container:
    name: "{{ _docker_edgednssvr_container_name }}"
    state: absent

# Bring up containers
- name: up syslog container
  command: "docker-compose up -d --no-build syslog-ng"
  args:
    chdir: "{{ _sync_sources_dest }}"
  environment:
    REMOTE_SYSLOG_IP: "{{ _remote_syslog_ip }}"
    VER: "{{ _docker_containers_ver }}"
  changed_when: true

- name: up edgednssvr container
  command: "docker-compose up --no-start --no-build edgednssvr"
  args:
    chdir: "{{ _sync_sources_dest }}"
  environment:
    LOCAL_SYSLOG_IP: "192.168.122.1"
    VER: "{{ _docker_containers_ver }}"
  changed_when: true
  when: "onprem_dataplane == 'nts'"

- name: start edgednssvr container
  command: "docker-compose up --no-build --detach edgednssvr"
  args:
    chdir: "{{ _sync_sources_dest }}"
  environment:
    LOCAL_SYSLOG_IP: "192.168.122.1"
    VER: "{{ _docker_containers_ver }}"
  changed_when: true
  when: "onprem_dataplane == 'ovncni'"

- name: up EAA container
  command: "docker-compose up -d --no-build eaa"
  args:
    chdir: "{{ _sync_sources_dest }}"
  environment:
    VER: "{{ _docker_containers_ver }}"
  changed_when: true

- name: up appliance container
  command: "docker-compose up -d --no-build appliance"
  args:
    chdir: "{{ _sync_sources_dest }}"
  environment:
    VER: "{{ _docker_containers_ver }}"
    HOSTNAME: "{{ ansible_hostname }}"
  changed_when: true

# Certificates and keys exchange
- name: Wait for default key file
  shell: while true; do [ -s /var/lib/appliance/certs/key.pem ] && break; done
  changed_when: false

- name: Generate key for controller
  shell: >
    set -o pipefail &&
    openssl11 pkey -pubout -in /var/lib/appliance/certs/key.pem -inform pem -outform der |
    sha384sum | xxd -r -p | openssl11 enc -a | tr -d '=' | tr '/+' '_-'
  args:
  register: key_msg
  changed_when: true

- name: set verification key
  set_fact: verification_key="{{ key_msg.stdout }}"

- debug:
    msg: "THIS IS YOUR VERIFICATION KEY: {{ verification_key }}"

- name: store verification key in folder repository folder
  copy:
    content: "{{ verification_key }}"
    dest: "{{ _sync_sources_dest }}/verification_key.txt"

- name: add the node to controller's db
  include_tasks: subtasks/add_node_to_controller_db.yml

- name: restart syslog_ng container
  docker_container:
    name: "{{ _docker_syslog_container_name }}"
    state: started
    restart: yes
