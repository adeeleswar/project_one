# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2020 Intel Corporation

---

- name: Create folder for Helm Charts
  file:
    path: "{{ helm_charts_location }}"
    state: directory
    mode: '0744'

- name: Copy {{ app_name }} Helm Charts to the Master Node
  copy:
    src: "etcd"
    dest: "{{ helm_charts_location }}"

- name: Generate values file for {{ app_name }} Helm Chart from template
  template:
    src: etcd_values.yaml.j2
    dest: "{{ helm_chart_etcd }}/etcd-values.yaml"
    mode: 0744

- name: Deploy {{ app_name }} using Helm
  command: "helm install --namespace {{ k8s_eis_namespace }} -f {{ helm_chart_etcd }}/etcd-values.yaml {{ helm_release_name }} {{ helm_chart_etcd }}"

- name: Copy EIS openssl.cnf
  copy:
    src: "{{ eis_openssl_cnf }}"
    dest: "{{ etcd_certs_location }}/"

- name: Change default_bits in openssl.cnf
  lineinfile:
    path: "{{ etcd_certs_location }}/openssl.cnf"
    regexp: '^default_bits'
    line: "default_bits = {{ ca_default_bits }}"

- name: Check if RootCA already exists
  stat:
    path: "{{ rootca_location }}"
  register: ca_exists

- name: Generate RootCA certificates
  include_tasks: ./roles/etcd/deploy/tasks/root_certs_gen.yml
  when: ca_exists.stat.isdir is not defined

- name: Add RootCA certificate to the secrets
  command: "kubectl -n {{ k8s_eis_namespace }} create secret generic rootca --from-file={{ rootca_cert }}"
  changed_when: true
  ignore_errors: yes

- name: Generate ETCD server certificates
  include_tasks: ./roles/common/deploy/tasks/gen_etcd_client_cert.yml
  vars:
    app_name: "etcdserver"
    peer: "server"
    cert_name: "{{ app_name }}_{{ peer }}_certificate.pem"
    key_name: "{{ app_name }}_{{ peer }}_key.pem"

- name: Add etcdserver certificates to the secrets
  command: "kubectl -n {{ k8s_eis_namespace }} create secret tls etcdserver --key=./etcdserver_server_key.pem --cert=./etcdserver_server_certificate.pem"
  args:
    chdir: "{{ etcd_certs_location }}/etcdserver"
  changed_when: true
  ignore_errors: yes

- name: Generate root client certificates
  include_tasks: ./roles/common/deploy/tasks/gen_etcd_client_cert.yml
  vars:
    app_name: "root"
    peer: "client"
    cert_name: "{{ app_name }}_{{ peer }}_certificate.pem"
    key_name: "{{ app_name }}_{{ peer }}_key.pem"

- name: Copy eis_integ files
  copy:
    src: eis_integ/
    dest: "{{ eis_integ_path }}"
    mode: preserve

- name: Check if PYTHONPATH is already added to /etc/environment
  shell: cat /etc/environment |grep -q ^PYTHONPATH=
  register: pythonpath_present
  changed_when: false
  ignore_errors: yes

- name: Add PYTHONPATH base with '{{ eis_integ_path }}' to /etc/environment
  lineinfile:
    path: /etc/environment
    regexp: '^PYTHONPATH.*$'
    line: 'PYTHONPATH={{ ansible_env.PYTHONPATH }}:{{ eis_integ_path }}'
  when: pythonpath_present.rc != 0 and 'PYTHONPATH' in ansible_env

- name: Add PYTHONPATH with '{{ eis_integ_path }}' to /etc/environment
  lineinfile:
    path: /etc/environment
    regexp: '^PYTHONPATH.*$'
    line: 'PYTHONPATH={{ eis_integ_path }}'
  when: pythonpath_present.rc != 0 and 'PYTHONPATH' not in ansible_env

- name: Add just '{{ eis_integ_path }}' to the existing PYTHONPATH in /etc/environment
  lineinfile:
    path: /etc/environment
    regexp: '^PYTHONPATH=(["]*)((?!.*?{{ eis_integ_path }}).*?)(["]*)$'
    line: '^PYTHONPATH=\1\2:{{ eis_integ_path }}\3'
    backrefs: yes
  when: pythonpath_present.rc == 0

- name: Create directory structure for Etcdctl
  file:
    path: "{{ etcdctl_src_path }}"
    state: directory
    mode: '0755'

- name: Download and unarchive Etcdctl source repo
  unarchive:
    src: https://github.com/coreos/etcd/releases/download/{{ etcd_version }}/etcd-{{ etcd_version }}-linux-amd64.tar.gz
    dest: "{{ etcdctl_src_path }}"
    remote_src: yes
    extra_opts: [--strip-components=1]

- name: Check if PATH env is already added to /etc/environment
  shell: cat /etc/environment |grep -q ^PATH=
  register: path_present
  changed_when: false
  ignore_errors: yes

- name: Add PATH env base with '{{ etcdctl_src_path }}' to /etc/environment
  lineinfile:
    path: /etc/environment
    regexp: '^PATH.*$'
    line: 'PATH={{ ansible_env.PATH }}:{{ etcdctl_src_path }}'
  when: path_present.rc != 0

- name: Add just '{{ etcdctl_src_path }}' to the existing PATH in /etc/environment
  lineinfile:
    path: /etc/environment
    regexp: '^PATH=(["]*)((?!.*?{{ etcdctl_src_path }}).*?)(["]*)$'
    line: '^PATH=\1\2:{{ etcdctl_src_path }}\3'
    backrefs: yes
  when: path_present.rc == 0

- name: Write global config to the ETCD server
  shell: ./etcd_write.py ./configs/global.json
  args:
    chdir: "{{ eis_integ_path }}"
  environment:
    ETCDCTL_CACERT: "{{ rootca_cert }}"
    ETCDCTL_CERT: "{{ root_client_cert }}"
    ETCDCTL_KEY: "{{ root_client_key }}"
  changed_when: true
